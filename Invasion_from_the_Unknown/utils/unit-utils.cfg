#textdomain wesnoth-Invasion_from_the_Unknown

# Macros PLACE_UNITS_RANDOMLY, RANDOM_PLACEMENT_AREA, CLEAR_PLACEMENT_AREA, RANDOM_PLACEMENT
# were written by Rhuvaen for UtBS (1.3.x), and directly copied with minor modifications
#
# Many macros were written by Shadow Master on 2006, others were on 2007-2008

# wmlindent: start ignoring
#define DIRECTION_ALL
n,s,ne,nw,se,sw#enddef
# wmlindent: stop ignoring

#define IS_EXPENDABLE_LEADER
    overlays=misc/leader-expendable.png
#enddef

#define SELECT_RANDOM_FACING _VAR_ID
    [set_variable]
        name={_VAR_ID}
        random="{DIRECTION_ALL}"
    [/set_variable]
#enddef

# Used for SUFs that must skip units on the recall list; ugly WML workaround, hopefully I'll figure out
# a more elegant manner in 1.5.x's C++ code :) Note that the maximum boundaries are those of the map editor's
# create-map dialog.
#define IS_ON_MAP
    x=1-200
    y=1-200
#enddef

#define RECALL_SUF_POS _SUF _X _Y
    [recall]
        {_SUF}
        x,y={_X},{_Y}
    [/recall]
#enddef

#define RECALL_SUF _SUF
    [recall]
        {_SUF}
    [/recall]
#enddef

#define RECALL _DESC
    {RECALL_SUF (description={_DESC})}
#enddef

#define RECALL_POS _DESC _X _Y
    {RECALL_SUF_POS (description={_DESC}) ({_X}) ({_Y})}
#enddef

#define HAVE_UNIT_SUF SUF
    [have_unit]
        {SUF}
    [/have_unit]
#enddef

#define MAKE_GUARD
    [+unit]
        ai_special=guardian
    [/unit]
#enddef

#define FEMALE
    gender=female
#enddef

#define MALE
    gender=male
#enddef

#define MAKE_MALE
    [+unit]
        gender=male
    [/unit]
#enddef

#define MAKE_FEMALE
    [+unit]
        gender=female
    [/unit]
#enddef

# Append units in {STORE_VAR} to the recall list
#define APPEND_RECALL_LIST STORE_VAR
    {FOREACH {STORE_VAR} k}
    {VARIABLE {STORE_VAR}[$k].x recall}
    {VARIABLE {STORE_VAR}[$k].y recall}
    [unstore_unit]
        variable={STORE_VAR}[$k]
    [/unstore_unit]
    {NEXT k}
#enddef

# VARIATION: one of "",drake,swimmer,troll,wose,saurian,mounted,dwarf,bat,gryphon
#define ANONYMOUS_WC_GUARD VARIATION SIDE X Y
    [unit]
        type=Walking Corpse
        side={SIDE}
        x={X}
        y={Y}
        ai_special=guardian
        upkeep=loyal
        variation={VARIATION}
        [modifications]
            {TRAIT_UNDEAD}
        [/modifications]
    [/unit]
#enddef

#define ANONYMOUS_SOULLESS_GUARD VARIATION SIDE X Y
    [unit]
        type=Soulless
        side={SIDE}
        x={X}
        y={Y}
        ai_special=guardian
        upkeep=loyal
        variation={VARIATION}
        [modifications]
            {TRAIT_UNDEAD}
        [/modifications]
    [/unit]
#enddef

#define GENERIC_GUARDIAN_AUTOSIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
        generate_description=yes
        ai_special=guardian
        random_traits=yes
        random_gender=yes
        upkeep=full
    [/unit]
#enddef

#define GENERIC_UNIT_AUTOSIDE TYPE X Y
    [unit]
        type={TYPE}
        x={X}
        y={Y}
        generate_description=yes
        random_traits=yes
        upkeep=full
    [/unit]
#enddef

#define ANONYMOUS_UNIT TYPE SIDE X Y
    [unit]
        type={TYPE}
        side={SIDE}
        x={X}
        y={Y}
        upkeep=loyal
    [/unit]
#enddef

#define ANONYMOUS_GUARD TYPE SIDE X Y
    [unit]
        type={TYPE}
        side={SIDE}
        x={X}
        y={Y}
        ai_special=guardian
        upkeep=loyal
    [/unit]
#enddef

#define ANONYMOUS_MAKE_UNDEAD
    [+unit]
        [modifications]
            {TRAIT_UNDEAD}
        [/modifications]
    [/unit]
#enddef

#define ANONYMOUS_MAKE_MECHANICAL
    [+unit]
        [modifications]
            {TRAIT_MECHANICAL}
        [/modifications]
    [/unit]
#enddef

#define FACING_NORMAL
    facing=se
#enddef

#define FACING_REVERSE
    facing=sw
#enddef

#define MAKE_FACING_NORMAL
    [+unit]
        facing=se
    [/unit]
#enddef

#define MAKE_FACING_REVERSE
    [+unit]
        facing=sw
    [/unit]
#enddef

#define SET_FACING UNITFILTER FACING
    {CLEAR_VARIABLE __utils_facing_set_store}
    [store_unit]
        [filter]
            {UNITFILTER}
        [/filter]
        variable=__utils_facing_set_store
    [/store_unit]
    {FOREACH __utils_facing_set_store k}
    {VARIABLE (__utils_facing_set_store[$k].facing) ({FACING}) }
    [unstore_unit]
        variable=__utils_facing_set_store[$k]
        find_vacant=no
    [/unstore_unit]
    {NEXT k}
    {CLEAR_VARIABLE __utils_facing_set_store}
#enddef

#define MOVE_UNIT_EX FILTER PATH_X PATH_Y TO_X TO_Y
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=__utils_move_unit_ex_store
        kill=no
    [/store_unit]
    [scroll_to]
        x=$__utils_move_unit_ex_store.x
        y=$__utils_move_unit_ex_store.y
    [/scroll_to]
    {VARIABLE_OP __utils_move_unit_ex_path_x format ("$__utils_move_unit_ex_store.x|,{PATH_X},{TO_X}") }
    {VARIABLE_OP __utils_move_unit_ex_path_y format ("$__utils_move_unit_ex_store.y|,{PATH_Y},{TO_Y}") }
    [if]
        {VARIABLE_NUM_LESS_THAN ("__utils_move_unit_ex_store.x") ({TO_X}) }
        [then]
            {VARIABLE "__utils_move_unit_ex_store.facing" "se"}
        [/then]
        [else]
            [if]
                {VARIABLE_NUM_GREATER_THAN ("__utils_move_unit_ex_store.x") ({TO_X}) }
                [then]
                    {VARIABLE "__utils_move_unit_ex_store.facing" "sw"}
                [/then]
            [/if]
        [/else]
    [/if]
    {VARIABLE __utils_move_unit_ex_store.x {TO_X} }
    {VARIABLE __utils_move_unit_ex_store.y {TO_Y} }
    [kill]
        {FILTER}
        animate=no
        fire_event=no
    [/kill]
    [move_unit_fake]
        type=$__utils_move_unit_ex_store.type
        gender=$__utils_move_unit_ex_store.gender
        variation=$__utils_move_unit_ex_store.variation
        side=$__utils_move_unit_ex_store.side
        x=$__utils_move_unit_ex_path_x
        y=$__utils_move_unit_ex_path_y
    [/move_unit_fake]
    [unstore_unit]
        variable=__utils_move_unit_ex_store
        find_vacant=yes
    [/unstore_unit]
    {REDRAW}
    {CLEAR_VARIABLE __utils_move_unit_ex_store}
    {CLEAR_VARIABLE __utils_move_unit_ex_path_x}
    {CLEAR_VARIABLE __utils_move_unit_ex_path_y}
#enddef

#define RANDOM_PLACEMENT_AREA _X _Y _RADIUS
    # set a placement area for subsequent random placement of units
    [store_locations]
        variable=random_placement_locations
        x,y={_X},{_Y}
        radius={_RADIUS}
    [/store_locations]
    {VARIABLE_OP random_string format "0..$random_placement_locations.length"}
#enddef

#define PLACE_UNITS_RANDOMLY NUM SIDE TYPE DESCRIPTION USER_DESCRIPTION OTHER
    {VARIABLE number {NUM}}
    {VARIABLE i 0}
    [while]
        [variable]
            name=i
            less_than=$number
        [/variable]
        [do]
            {RANDOM $random_string}
            {VARIABLE random_placement_x $random_placement_locations[$random].x}
            {VARIABLE random_placement_y $random_placement_locations[$random].y}
            [unit]
                side={SIDE}
                type={TYPE}
                x=$random_placement_x
                y=$random_placement_y
                description={DESCRIPTION}
                user_description={USER_DESCRIPTION}
                upkeep=full
                {OTHER}
            [/unit]
            {VARIABLE_OP i add 1}
        [/do]
    [/while]
#enddef

#define CLEAR_PLACEMENT_AREA
    {CLEAR_VARIABLE random_string}
    {CLEAR_VARIABLE random_placement_x}
    {CLEAR_VARIABLE random_placement_y}
    {CLEAR_VARIABLE random_placement_locations}
#enddef

#!***Macro to random place unit within area***
#define RANDOM_PLACEMENT _X _Y _RADIUS _UNIT_WML_STRUCT
    [store_locations]
        x,y={_X},{_Y}
        radius={_RADIUS}
        variable=random_placement_locations
    [/store_locations]

    {VARIABLE_OP random_string format "0..$random_placement_locations.length"}

    {RANDOM $random_string}

    {VARIABLE_OP random_placement_x format "$random_placement_locations[$random].x"}
    {VARIABLE_OP random_placement_y format "$random_placement_locations[$random].y"}

    {CLEAR_VARIABLE random_placement_locations}

    {_UNIT_WML_STRUCT}

    [+unit]
        x,y=$random_placement_x,$random_placement_y
    [/unit]

    {CLEAR_VARIABLE random_placement_x}
    {CLEAR_VARIABLE random_placement_y}
#enddef

#define HIVE_SPAWN_ONCE_POINT _TYPES _SIDE _X _Y
    [event]
        name=prestart
        {VARIABLE_RANDOM hivespawn_type ({_TYPES})}
        {VARIABLE_RANDOM hivespawn_facing "{DIRECTION_ALL}"}
        [unit]
            user_description=""
            description=hivespawn_{_X}_{_Y}
            type=$hivespawn_type
            side={_SIDE}
            ai_special=guardian
            facing=$hivespawn_facing
            x={_X}
            y={_Y}
            random_traits=yes
        [/unit]
        {CLEAR_VARIABLE hivespawn_type}
        {CLEAR_VARIABLE hivespawn_facing}
    [/event]
#enddef

#define HIVE_SPAWN___EVT_DIE TYPES SIDE X Y RESPAWN RESPAWN_TIMEOUT
    [event]
        name=die
        first_time_only=no
        [filter]
            description=hivespawn_{X}_{Y}
        [/filter]
        {VARIABLE temp_macrotext ({RESPAWN})}
        # Use a random probability mechanism based in multiple RNG results to decrease or increase
        # the chance of not respawning units, according to difficulty setting
        {VARIABLE_RANDOM temp_chance_of_not_respawning1 {DIFF (32..50)   (0..100)   (0..500)} }
        {VARIABLE_RANDOM temp_chance_of_not_respawning2 {DIFF (128..152) (100..200) (0..500)} }
        {VARIABLE_MODULO temp_chance_of_not_respawning2 {DIFF 7 13 53} }
        [if]
            {VARIABLE_BOOLEAN_EQUALS temp_macrotext yes}
            [and]
                {VARIABLE_NUM_GREATER_THAN global_respawning_flag 0}
            [/and]
            [and]
                {VARIABLE_NUM_NOT_EQUALS temp_chance_of_not_respawning1 48}
            [/and]
            [and]
                {VARIABLE_NUM_NOT_EQUALS temp_chance_of_not_respawning2 0}
            [/and]
            [then]
                {VARIABLE time_to_respawn_{X}_{Y} (-{RESPAWN_TIMEOUT})}
                [event]
                    name=new turn
                    first_time_only=no
                    {VARIABLE_INC time_to_respawn_{X}_{Y}}
                    [if]
                        {VARIABLE_NUM_EQUALS time_to_respawn_{X}_{Y} 0}
                        [then]
                            {VARIABLE_RANDOM hivespawn_type ({TYPES})}
                            {VARIABLE_RANDOM hivespawn_facing "sw,se"}
                            [unit]
                                user_description=""
                                description=hivespawn_{X}_{Y}
                                type=$hivespawn_type
                                side={SIDE}
                                ai_special=guardian
                                facing=$hivespawn_facing
                                x={X}
                                y={Y}
                                random_traits=yes
                            [/unit]
                            {CLEAR_VARIABLE hivespawn_type}
                            {CLEAR_VARIABLE hivespawn_facing}
                        [/then]
                    [/if]
                [/event]
            [/then]
        [/if]
        {CLEAR_VARIABLE temp_macrotext}
        {CLEAR_VARIABLE temp_chance_of_not_respawning1}
        {CLEAR_VARIABLE temp_chance_of_not_respawning2}
    [/event]
#enddef

#define HIVE_SPAWN___EVT_ENDLEVEL _X _Y
    [event]
        name=victory
        {CLEAR_VARIABLE time_to_respawn_{_X}_{_Y} }
        {CLEAR_VARIABLE global_respawning_flag}
    [/event]
#enddef

# Variant of {HIVE_SPAWN_POINT} that should be called from inside an event; useful for
# creating spawn points only when required
#define PUT_HIVE_SPAWN_POINT TYPES SIDE X Y RESPAWN RESPAWN_TIMEOUT
    {VARIABLE global_respawning_flag 1}
    {VARIABLE_RANDOM hivespawn_type ({TYPES})}
    {VARIABLE_RANDOM hivespawn_facing "sw,se"}
    [unit]
        user_description=""
        description=hivespawn_{X}_{Y}
        type=$hivespawn_type
        side={SIDE}
        ai_special=guardian
        facing=$hivespawn_facing
        x={X}
        y={Y}
        random_traits=yes
    [/unit]
    {CLEAR_VARIABLE hivespawn_type}
    {CLEAR_VARIABLE hivespawn_facing}
    {HIVE_SPAWN___EVT_DIE {TYPES} {SIDE} {X} {Y} {RESPAWN} {RESPAWN_TIMEOUT} }
    {HIVE_SPAWN___EVT_ENDLEVEL {X} {Y} }
#enddef

#define HIVE_SPAWN_POINT TYPES SIDE X Y RESPAWN RESPAWN_TIMEOUT
    [event]
        name=prestart
        {VARIABLE global_respawning_flag 1}
        {VARIABLE_RANDOM hivespawn_type ({TYPES})}
        {VARIABLE_RANDOM hivespawn_facing "sw,se"}
        [unit]
            user_description=""
            description=hivespawn_{X}_{Y}
            type=$hivespawn_type
            side={SIDE}
            ai_special=guardian
            facing=$hivespawn_facing
            x={X}
            y={Y}
            random_traits=yes
        [/unit]
        {CLEAR_VARIABLE hivespawn_type}
        {CLEAR_VARIABLE hivespawn_facing}
    [/event]
    {HIVE_SPAWN___EVT_DIE {TYPES} {SIDE} {X} {Y} {RESPAWN} {RESPAWN_TIMEOUT} }
    {HIVE_SPAWN___EVT_ENDLEVEL {X} {Y} }
#enddef

# UTILITY MACROS THAT ARE SPECIFIC TO THE BIOMECHANICAL UNITS

#define SHAXTHAL_SET_SURFACE_VARIATIONS_FLAG
    [event]
        name=prestart
        {VARIABLE __uu_shaxthal_in_surface yes}
    [/event]
    [event]
        name=victory
        {CLEAR_VARIABLE __uu_shaxthal_in_surface}
    [/event]
#enddef

#define SHAXTHAL_ONRECRUIT_CHECK_SURFACE_FLAG _TYPE_SELF
    [event]
        name=prerecruit
        first_time_only=no
        [filter]
            type={_TYPE_SELF}
        [/filter]
        [if]
            {VARIABLE_BOOLEAN_EQUALS __uu_shaxthal_in_surface yes}
            [then]
                {VARIABLE temp_uu_objid "$unit.description|_set_variation"}
                [object]
                    silent=yes
                    id=$temp_uu_objid
                    [filter]
                        x=$x1
                        y=$y1
                    [/filter]
                    [effect]
                        apply_to=variation
                        name=surface
                    [/effect]
                [/object]
                {CLEAR_VARIABLE temp_uu_objid}
            [/then]
        [/if]
    [/event]
#enddef

#define SHAXTHAL_SURFACE_VARIATION
    variation=surface
#enddef

#define SHAXTHAL_MAKE_SURFACE_VARIATION
    [+unit]
        {SHAXTHAL_SURFACE_VARIATION}
    [/unit]
#enddef

#define ROLE _ROLE_TAG _SUF
    [role]
        role={_ROLE_TAG}
        {_SUF}
    [/role]
    [if]
        [not]
            [have_unit]
                {IS_ON_MAP}
                role={_ROLE_TAG}
            [/have_unit]
        [/not]
        [then]
            {RECALL_SUF (role={_ROLE_TAG})}
        [/then]
    [/if]
#enddef

#define REMOVE_ROLE _ROLE_TAG
    [store_unit]
        [filter]
            role={_ROLE_TAG}
        [/filter]
        variable=_varMT_unit_REMOVE_ROLE
    [/store_unit]
    {FOREACH _varMT_unit_REMOVE_ROLE i}
        {CLEAR_VARIABLE _varMT_unit_REMOVE_ROLE[$i].role}
        [unstore_unit]
            variable=_varMT_unit_REMOVE_ROLE[$i]
            find_vacant=no
        [/unstore_unit]
    {NEXT i}
#enddef

# wmlindent: start ignoring

#define MSG_IMGSRC_PORTRAIT
profile #enddef

#define MSG_IMGSRC_BASEFRAME
image #enddef

# wmlindent: stop ignoring

#define MSG_FAKE_UNIT _V _IMGSRC _MSG
    # Make sure parameters are expanded in desired order
    {VARIABLE _varMT_str_MSG_FAKE_UNIT.udesc (${_V}.user_description)}
    {VARIABLE _varMT_str_MSG_FAKE_UNIT.img (${_V}.{_IMGSRC})}

    [message]
        speaker=narrator
        caption="$_varMT_str_MSG_FAKE_UNIT.udesc"
        image="$_varMT_str_MSG_FAKE_UNIT.img"
        message={_MSG} # wmllint: ignore
    [/message]

    {CLEAR_VARIABLE _varMT_str_MSG_FAKE_UNIT}
#enddef

