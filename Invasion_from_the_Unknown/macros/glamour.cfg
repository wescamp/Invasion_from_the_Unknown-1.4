#textdomain wesnoth-Invasion_from_the_Unknown

# "Originally, a 'glamour' was a spell cast over someone, particularly to change how things appeared to them."
#          -- source: English wikipedia (GNU FDL)
#
# Faerie Glamour ability code and other helper methods
# Written by Ignacio R. Morelle (Shadow Master) around last week of Dec. 2007, revised and
# tested on January 08th 2008, 02:45 AM

# NOTE: {GLAMOUR_UI_SETUP} makes essemptial assumptions on how the variable expansion works
# on Wesnoth 1.4. If it ever changes again (the last time that happened was on 1.3.2), all this code
# will have to be revised carefully to make sure it still works as intended!
#
# Most of it could have been made easier to maintain if I didn't decide this ability to be
# reusable in other campaigns for more characters than Elynia

# Ability granted to Elynia via a special object
# Has a fake AbilityWML block to allow for displaying info in the game's help
#define ABILITY_GLAMOUR
    [dummy]
        id=glamour
        name= _ "glamour"
        description= _ "Glamour:
All faeries can cast illusions on their enemies (or victims) that can be used to cloak themselves. However, it is not properly suited for combat, as it puts the faerie in a weak state and exposes her to physical attack.

A faerie may use the enhanced spell of glamour to transform herself completely into other creature that she knows and has learned about its anatomy and behavior. The unit that casts the spell during a turn, will not be able to morph back into its original form or another target until the next turn at the begin of which the unit has been resting (that is, did not move or attack during the previous turn). The movement points are set to half the amount left before casting the spell always. The original unit's traits and abilities are kept only when applicable. AMLAs (After-Maximum-Level-Advancements) are always discarded until the units morphs back into its original form.

The metamorphed faerie's maximum health may differ from her normal amoumt, depending on the target creature kind. This also applies when morphing back into her original form.

The experience points gained in the original form or a metamorphic form are not related, and the later are always discarded, unlike the original experience amount, which is stored between changes of state."
    [/dummy]
#enddef

# Initialization stub
#define GLAMOUR_DO_INITIALIZATION CASTER_STORE
    {VARIABLE {CASTER_STORE}.variables.glamour_status.active no}
    {VARIABLE {CASTER_STORE}.variables.glamour_status.enabled yes}
    {VARIABLE {CASTER_STORE}.variables.glamour_status.base_unit_type "${CASTER_STORE}.type"}
#enddef

# Register a single glamour variation, including its internal id, language name and unit
# baseframe, applying an RC markup if desirable. It also stores a max_hitpoints value to keep
# optimized the menu displaying. However, it is possible that it's necessary to come back to the
# scenario that did the register process when that value is modified at [units] level.
#define GLAMOUR_REGISTER_VARIATION CASTER_STORE INDEX NAME
    {VARIABLE {CASTER_STORE}.variables.glamour_status.targets[{INDEX}].enabled yes}
    {VARIABLE {CASTER_STORE}.variables.glamour_status.targets[{INDEX}].variation_name {NAME} }
    [unit]
        alpha=0
        x,y,side=1,1,1
        type=${CASTER_STORE}.variables.glamour_status.base_unit_type
        variation=${CASTER_STORE}.variables.glamour_status.targets[{INDEX}].variation_name
        description=temp_glamour_WMLprobe
    [/unit]
    [store_unit]
        [filter]
            description=temp_glamour_WMLprobe
        [/filter]
        kill=yes
        variable=temp_glamour_WMLprobe
    [/store_unit]
    {VARIABLE {CASTER_STORE}.variables.glamour_status.targets[{INDEX}].menu_string ("&"+"$temp_glamour_WMLprobe.image|~RC($temp_glamour_WMLprobe.flag_rgb|>red)"+"="+"$temp_glamour_WMLprobe.language_name")}
    {VARIABLE {CASTER_STORE}.variables.glamour_status.targets[{INDEX}].max_hitpoints $temp_glamour_WMLprobe.max_hitpoints}
    {VARIABLE {CASTER_STORE}.variables.glamour_status.targets[{INDEX}].max_moves $temp_glamour_WMLprobe.moves}
    {CLEAR_VARIABLE temp_glamour_WMLprobe}
#enddef

#define __GLAMOUR_MENU_ENTRY INDEX
    [option]
        id=glamour_menu_entry_{INDEX}
        message=$unit.variables.glamour_status.targets[{INDEX}].menu_string
        [show_if]
            {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.targets[{INDEX}].enabled yes}
            {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.active no}
        [/show_if]
        [command]
            {VARIABLE temp_glamour_choice {INDEX} }
        [/command]
    [/option]
#enddef

#define __GLAMOUR_DEMORPH SUF
    [store_unit]
        [filter]
            {SUF}
        [/filter]
        variable=temp_glamour_stored_morphed_unit
        kill=yes
    [/store_unit]
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.x $temp_glamour_stored_morphed_unit.x}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.y $temp_glamour_stored_morphed_unit.y}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.variables.glamour_status.active no}
    # Keep current amount of attacks_left
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.attacks_left $temp_glamour_stored_morphed_unit.attacks_left}
    # Set remaining movement points to half the current amount, or to the base maximum, whichever
    # is the least. Also set resting to false.
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.resting no}
    {VARIABLE_DIV temp_glamour_stored_morphed_unit.moves 2}
    {VARIABLE_NUMERICAL_MINIMUM $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.max_moves temp_glamour_stored_morphed_unit.moves $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.moves}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.status.poisoned $temp_glamour_stored_morphed_unit.status.poisoned}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.status.slowed $temp_glamour_stored_morphed_unit.status.slowed}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.status.stone $temp_glamour_stored_morphed_unit.status.stone}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.status.hides $temp_glamour_stored_morphed_unit.status.hides}
    {VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.canrecruit $temp_glamour_stored_morphed_unit.canrecruit}
    # Calculate new HP amount...
    # FIXME: commented as AMLA's effect on max HP screws up the calculations
    #{VARIABLE temp_glamour_new_hp_percentage $temp_glamour_stored_morphed_unit.hitpoints}
    #{VARIABLE_MUL temp_glamour_new_hp_percentage 100}
    #{VARIABLE_DIV temp_glamour_new_hp_percentage $temp_glamour_stored_morphed_unit.max_hitpoints}
    #{VARIABLE temp_glamour_new_hp_abs $temp_glamour_new_hp_percentage}
    #{VARIABLE_MUL temp_glamour_new_hp_abs $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.max_hitpoints}
    #{VARIABLE_DIV temp_glamour_new_hp_abs 100}
    #{VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data|.hitpoints $temp_glamour_new_hp_abs}
    [unstore_unit]
        find_vacant=yes
        variable=$temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data
    [/unstore_unit]
    [if]
        # See above explanation for not using a boolean comparison
        {VARIABLE_LEXICAL_EQUALS glamour_1st_time yes}
        [then]
            {VARIABLE glamour_1st_time no}
            {REDRAW}
            [scroll_to]
                x,y=$temp_glamour_stored_morphed_unit.x|,$temp_glamour_stored_morphed_unit.y
            [/scroll_to]
            {MSG_SUF (x,y=$temp_glamour_stored_morphed_unit.x|,$temp_glamour_stored_morphed_unit.y) ( _ "Ahhhh! Back to normal.")}
        [/then]
    [/if]
    {CLEAR_VARIABLE $temp_glamour_stored_morphed_unit.variables.glamour_status.base_unit_data}
    {CLEAR_VARIABLE temp_glamour_stored_morphed_unit}
    #{CLEAR_VARIABLE temp_glamour_new_hp_abs}
    #{CLEAR_VARIABLE temp_glamour_new_hp_percentage}
#enddef

#define GLAMOUR_INIT_STUB
    [event]
        name=victory
        [store_unit]
            [filter]
                side=1
                [wml_filter]
                    [variables]
                        [glamour_status]
                            enabled=yes
                            active=yes
                        [/glamour_status]
                    [/variables]
                [/wml_filter]
            [/filter]
            kill=no
            variable=temp_demorphing_list
        [/store_unit]
        {FOREACH temp_demorphing_list i}
        {__GLAMOUR_DEMORPH (
        x=$temp_demorphing_list[$i].x
        y=$temp_demorphing_list[$i].y
        )}
        {NEXT i}
        {CLEAR_VARIABLE temp_demorphing_list}
    [/event]
#enddef

# Interface WML block to be called from a prestart event
#define GLAMOUR_UI_SETUP
    [set_menu_item]
        id=glamour_cmd_castspell
        image=icons/menu-glamour.png
        description= _ "Cast spell of glamour"
        [show_if]
            [have_unit]
                x=$x1
                y=$y1
                [wml_filter]
                    resting=yes
                    [variables]
                        [glamour_status]
                            enabled=yes
                        [/glamour_status]
                    [/variables]
                [/wml_filter]
            [/have_unit]
        [/show_if]
        [filter_location]
            [not]
                # List of impassable terrain strings
                terrain=Xu,Xv,*^Xm,Qxu,Qxs,Ql,Qlf,*^Yz,Qxv,*^Zse,*^Zsw,Xz
            [/not]
        [/filter_location]
        [filter_location]
        [/filter_location]
        [command]
            [allow_undo]
            [/allow_undo]
            {VARIABLE temp_glamour_choice "NULL"}
            [message]
                speaker=narrator
                image=attacks/touch-faerie.png
                caption= _ "Spell of glamour"
                message= _ "What creature should this unit transform into?"
                {__GLAMOUR_MENU_ENTRY 0}
                {__GLAMOUR_MENU_ENTRY 1}
                {__GLAMOUR_MENU_ENTRY 2}
                {__GLAMOUR_MENU_ENTRY 3}
                {__GLAMOUR_MENU_ENTRY 4}
                {__GLAMOUR_MENU_ENTRY 5}
                {__GLAMOUR_MENU_ENTRY 6}
                {__GLAMOUR_MENU_ENTRY 7}
                {__GLAMOUR_MENU_ENTRY 8}
                {__GLAMOUR_MENU_ENTRY 9}
                [option]
                    message="&"+"attacks/entangle.png"+"="+_"Back to normal"
                    [show_if]
                        {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.active yes}
                        {VARIABLE_BOOLEAN_EQUALS unit.resting yes}
                    [/show_if]
                    [command]
                        {VARIABLE temp_glamour_choice "ROOT"}
                    [/command]
                [/option]
                [option]
                    #textdomain wesnoth-lib
                    message="&"+"attacks/blank-attack.png"+"="+_"Cancel"
                    #textdomain wesnoth-Invasion_from_the_Unknown
                [/option]
            [/message]
            {REDRAW}
            [if]
                {VARIABLE_LEXICAL_NOT_EQUALS temp_glamour_choice "NULL"}
                {VARIABLE_LEXICAL_NOT_EQUALS temp_glamour_choice "ROOT"}
                [then]
                    # Last frontier of safety; a last sanity check that should always be passed unless
                    # the logic of this code is completely borked.
                    [if]
                        {VARIABLE_BOOLEAN_EQUALS unit.variables.glamour_status.active yes}
                        [then]
                            [message]
                                speaker=narrator
                                caption="Run-time inconsistency detected"
                                message="While casting glamour on $unit.description, internal inconsistency 0001 was detected. The game will abort this scenario now. Please report this to the campaign maintainer with the last saved game."
                                image=wesnoth-icon.png
                            [/message]
                            [endlevel]
                                result=defeat
                            [/endlevel]
                        [/then]
                    [/if]
                    {VARIABLE_F temp_varid "glamour_$unit.description|_stored_base_unit"}
                    [store_unit]
                        [filter]
                            x,y=$x1|,$y1
                        [/filter]
                        variable=temp_glamour_stored_base_unit
                        kill=no
                    [/store_unit]
                    [if]
                        # Intentionally not a boolean comparison, in case the default value for
                        # utils::string_bool() parameter 2 gets changed from 'false' to 'true' at some
                        # point. We are sure an empty string never matches a valid string.
                        {VARIABLE_LEXICAL_EQUALS glamour_1st_time yes}
                        [then]
                            {REDRAW}
                            [scroll_to]
                                x,y=$x1|,$y1
                            [/scroll_to]
                            {MSG_NARRATOR ( _ "You slowly feel like if your body was vanishing. And that is what it does indeed. Your surroundings disappear for a moment, and there is silence...")}
                        [/then]
                    [/if]
                    [store_unit]
                        [filter]
                            x,y=$x1|,$y1
                        [/filter]
                        variable=$temp_varid
                        kill=yes
                    [/store_unit]
                    # Ready for action...
                    # Set remaining movement points to half the current amount, or to the morphed maximum, whichever
                    # is the least. Also set resting to false, essential for making the mechanism that prevents remorphing
                    # before a rest turn has passed work.
                    {VARIABLE_DIV temp_glamour_stored_base_unit.moves 2}
                    {VARIABLE_NUMERICAL_MINIMUM temp_glamour_stored_base_unit.moves temp_glamour_stored_base_unit.variables.glamour_status.targets[$temp_glamour_choice].max_moves temp_new_mp}
                    # Set HP so that their equal the base form's percentage against its max HP, but for morphed form
                    # percentage / 100 = base HP left / base max HP
                    # => percentage = 100 * base HP left / base max HP
                    {VARIABLE temp_glamour_new_hp_percentage $temp_glamour_stored_base_unit.hitpoints}
                    {VARIABLE_MUL temp_glamour_new_hp_percentage 100}
                    {VARIABLE_DIV temp_glamour_new_hp_percentage $temp_glamour_stored_base_unit.max_hitpoints}
                    # FIXME: commented as AMLA's effect on max HP screws up the calculations
                    # Determinate the absolute new HP amount; we could have used an object instead, but meh :P
                    # target_HP / target_maxHP = percentage / 100
                    # => target_HP = percentage * target_maxHP / 100
                    #{VARIABLE temp_glamour_new_hp_abs $temp_glamour_new_hp_percentage}
                    #{VARIABLE_MUL temp_glamour_new_hp_abs $temp_glamour_stored_base_unit.variables.glamour_status.targets[$temp_glamour_choice].max_hitpoints}
                    #{VARIABLE_DIV temp_glamour_new_hp_abs 100}
                    [unit]
                        attacks_left=$temp_glamour_stored_base_unit.attacks_left
                        x,y=$temp_glamour_stored_base_unit.x|,$temp_glamour_stored_base_unit.y
                        type=$temp_glamour_stored_base_unit.variables.glamour_status.base_unit_type
                        variation=$temp_glamour_stored_base_unit.variables.glamour_status.targets[$temp_glamour_choice].variation_name
                        description=$temp_glamour_stored_base_unit.description
                        user_description=$temp_glamour_stored_base_unit.user_description
                        canrecruit=$temp_glamour_stored_base_unit.canrecruit
                        overlays=$temp_glamour_stored_base_unit.overlays
                        #	hitpoints=$temp_glamour_new_hp_abs
                        side=1
                        moves=$temp_new_mp
                        upkeep=$temp_glamour_stored_base_unit.upkeep
                        resting=no
                        # Inherit misc status parameters
                        [status]
                            poisoned=$temp_glamour_stored_base_unit.status.poisoned
                            stone=$temp_glamour_stored_base_unit.status.stone
                            hides=$temp_glamour_stored_base_unit.status.hides
                            slowed=$temp_glamour_stored_base_unit.status.slowed
                        [/status]
                        [variables]
                            [glamour_status]
                                active=yes
                                enabled=yes
                                base_unit_data=$temp_varid
                            [/glamour_status]
                        [/variables]
                    [/unit]
                    # Store the created unit
                    #[store_unit]
                    #	[filter]
                    #		description=$temp_glamour_stored_base_unit.description
                    #	[/filter]
                    #	variable=temp_glamour_morph_unit_fixup
                    #[/store_unit]
                    # Iterate over all original traits and copy them onto the created unit
                    #{FOREACH temp_glamour_stored_base_unit.modifications.trait j}
                    #{NEXT j}
                    [if]
                        # See above explanation for not using a boolean comparison
                        {VARIABLE_LEXICAL_EQUALS glamour_1st_time yes}
                        [then]
                            {REDRAW}
                            [scroll_to]
                                x,y=$temp_glamour_stored_base_unit.x|,$temp_glamour_stored_base_unit.y
                            [/scroll_to]
                            {MSG_NARRATOR ( _ "... and suddenly you can see again. But your body is not the same as before. Its new structure is completely alien to you, and you do great struggle to stand up.")}
                            [if]
                                {VARIABLE_LEXICAL_EQUALS temp_glamour_stored_base_unit.description Elynia}
                                [then]
                                    {MSG_UNIT (Mal Keshar) ( _ "Oh... my... god. No, seriously, what wicked devilry is this?")}
                                    {MSG_UNIT (Erathan) ( _ "Surely I have never seen anything like... like this.")}
                                [/then]
                            [/if]
                        [/then]
                    [/if]
                    {CLEAR_VARIABLE temp_glamour_stored_base_unit}
                    {CLEAR_VARIABLE temp_varid}
                    {CLEAR_VARIABLE temp_new_mp}
                    {CLEAR_VARIABLE temp_glamour_new_hp_abs}
                    {CLEAR_VARIABLE temp_glamour_new_hp_percentage}
                [/then]
                [else]
                    [if]
                        {VARIABLE_LEXICAL_EQUALS temp_glamour_choice "ROOT"}
                        [then]
                            {__GLAMOUR_DEMORPH (x,y=$x1|,$y1)}
                        [/then]
                    [/if]
                [/else]
            [/if]
            {CLEAR_VARIABLE temp_glamour_choice}
        [/command]
    [/set_menu_item]
#enddef
