#textdomain wesnoth-Invasion_from_the_Unknown

# This campaign uses a load of macros that serve as syntactic shorcuts throughout the code,
# or perform common operations that would otherwise require lots of time to be written.

# Please don't move or remove this file or its contents without prior checking on the
# campaign's WML file.

# The VOID macro; rarely used, and when it is, it's mainly for visual decoration on the WML
#define VOID
#enddef
# The NULL macro defines a nil block of code
#define NULL
#enddef

# Macro which allows to add dummy translator notes, for instance, so that they do get to appear
# in wmlxgettext's output but are ignored by the game.
#define DUMMY _FOOBAR
#enddef

# For code that ought to be executed in a guaranteed order.
# This is the first WML clause which contents will be processed in a game event.
#define COMMAND _IN
	[command]
		{_IN}
	[/command]
#enddef

# Logical OR
#define OR _IN
	[or]
		{_IN}
	[/or]
#enddef

# Logical AND
#define AND _IN
	[and]
		{_IN}
	[/and]
#enddef

# Logical NOT
#define NOT _IN
	[not]
		{_IN}
	[/not]
#enddef

#define FOR ITOR ITOR_INIT_VAL ITOR_COND ITOR_INC_STEP CODE
	{VARIABLE {ITOR} {ITOR_INIT_VAL} }
	[while]
		[variable]
			name={ITOR}
			{ITOR_COND}
		[/variable]
		[do]
			{CODE}
			[set_variable]
				name={ITOR}
				add={ITOR_INC_STEP}
			[/set_variable]
		[/do]
	[/while]
	{CLEAR_VARIABLE {ITOR} }
#enddef

# Loosely C-style switch clause macros
#define SWITCH _VAR_NAME
	[set_variable]
		name=__temp_SWITCH
		value={_VAR_NAME}
	[/set_variable]
#enddef

# For CASE_LEXICAL and CASE_NUMERICAL we are toast if the WML preprocessor doesn't do
# automatic variable expansion at [if][variable] level on name= key.
#wmllint: unbalanced-on
#define CASE_LEXICAL _VALUE
	[if]
		[variable]
			name=$__temp_SWITCH
			equals={_VALUE}
		[/variable]
		[then]
#enddef

#define CASE _VALUE
	{CASE_LEXICAL {_VALUE} } #enddef

#define CASE_NUMERICAL _VALUE
	[if]
		[variable]
			name=$__temp_SWITCH
			numerical_equals={_VALUE}
		[/variable]
		[then]
#enddef

#define END_CASE
		[/then]
	[/if]
#enddef
#wmllint: unbalanced-off

#define END_SWITCH
	[clear_variable]
		name=__temp_SWITCH
	[/clear_variable]
#enddef

# Supposedly superseded by VARIABLE on Wesnoth 1.3.1
#define VARIABLE_F VAR_ID NF_RVALUE
	{VARIABLE_OP {VAR_ID} format {NF_RVALUE} }#enddef
#define VARIABLE_L VAR_ID NF_RVALUE
	{VARIABLE_OP {VAR_ID} literal {NF_RVALUE} }#enddef

#define TIMESTAMP_TO_VARIABLE VAR_ID
	{VARIABLE_OP {VAR_ID} time stamp }#enddef

##define MAP_HEIGHT_TO_VARIABLE VAR_ID
#	{VARIABLE_OP {VAR_ID} map_size y }#enddef
##define MAP_WIDTH_TO_VARIABLE VAR_ID
#	{VARIABLE_OP {VAR_ID} map_size x }#enddef

#define VARIABLE_CONCATENATE VAR_ID RVALUE
	{VARIABLE {VAR_ID} "${VAR_ID}|{RVALUE}"}#enddef
#define VARIABLE_INCREMENT VAR_ID
	{VARIABLE_OP {VAR_ID} add (1) }#enddef
#define VARIABLE_DECREMENT VAR_ID
	{VARIABLE_OP {VAR_ID} add (-1) }#enddef
#define VARIABLE_ADD VAR_ID RVALUE
	{VARIABLE_OP {VAR_ID} add {RVALUE} }#enddef
#define VARIABLE_MINUS VAR_ID RVALUE
	{VARIABLE_OP {VAR_ID} add -{RVALUE} }#enddef
#define VARIABLE_MULTIPLY VAR_ID RVALUE
	{VARIABLE_OP {VAR_ID} multiply {RVALUE} }#enddef
#define VARIABLE_DIVIDE VAR_ID RVALUE
	{VARIABLE_OP {VAR_ID} divide {RVALUE} }#enddef
#define VARIABLE_MODULO VAR_ID RVALUE
	{VARIABLE_OP {VAR_ID} modulo {RVALUE} }#enddef
#define VARIABLE_NEGATE VAR_ID
	{VARIABLE_OP {VAR_ID} multiply -1}#enddef
#define VARIABLE_RANDOM VAR_ID RVALUE
	{VARIABLE_OP {VAR_ID} random {RVALUE} }#enddef

# short aliases
#define VARIABLE_CAT VAR_ID RVALUE
	{VARIABLE_CONCATENATE {VAR_ID} {RVALUE} }#enddef
#define VARIABLE_INC VAR_ID
	{VARIABLE_INCREMENT {VAR_ID} }#enddef
#define VARIABLE_DEC VAR_ID
	{VARIABLE_DECREMENT {VAR_ID} }#enddef
#define VARIABLE_SUM VAR_ID RVALUE
	{VARIABLE_ADD {VAR_ID} {RVALUE} }#enddef
#define VARIABLE_MIN VAR_ID RVALUE
	{VARIABLE_MINUS {VAR_ID} {RVALUE} }#enddef
#define VARIABLE_MUL VAR_ID RVALUE
	{VARIABLE_MULTIPLY {VAR_ID} {RVALUE} }#enddef
#define VARIABLE_DIV VAR_ID RVALUE
	{VARIABLE_DIVIDE {VAR_ID} {RVALUE} }#enddef
#define VARIABLE_MOD VAR_ID RVALUE
	{VARIABLE_MODULO {VAR_ID} {RVALUE} }#enddef
#define VARIABLE_NEG VAR_ID
	{VARIABLE_NEGATE {VAR_ID} }#enddef
##define VARIABLE_RND VAR_ID RVALUE
#	{VARIABLE_RANDOM {VAR_ID} {RVALUE} }#enddef

# FIXME: this abreviated form became ambiguous on Wesnoh 1.3.13 due to the introduction
# of the 'rand' operator for variables on MP! This should be deprecated for 1.5.2 as suggested in the C++
# code.
#define VARIABLE_RAND VAR_ID RVALUE
	{VARIABLE_RANDOM {VAR_ID} {RVALUE} }#enddef

#define VARIABLE_NUM_EQUALS VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		numerical_equals={RVALUE}
	[/variable]
#enddef

#define VARIABLE_NUM_NOT_EQUALS VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		numerical_not_equals={RVALUE}
	[/variable]
#enddef

#define VARIABLE_NUM_LESS_THAN VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		less_than={RVALUE}
	[/variable]
#enddef

#define VARIABLE_NUM_GREATER_THAN VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		greater_than={RVALUE}
	[/variable]
#enddef

#define VARIABLE_NUM_LESS_OR_EQUAL_THAN VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		less_than_equal_to={RVALUE}
	[/variable]
#enddef

#define VARIABLE_NUM_GREATER_OR_EQUAL_THAN VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		greater_than_equal_to={RVALUE}
	[/variable]
#enddef

#define VARIABLE_NUMERICAL_EQUALS VAR_ID RVALUE
	{VARIABLE_NUM_EQUALS ({VAR_ID}) ({RVALUE})}#enddef

#define VARIABLE_NUMERICAL_NOT_EQUALS VAR_ID RVALUE
	{VARIABLE_NUM_NOT_EQUALS ({VAR_ID}) ({RVALUE})}#enddef

#define VARIABLE_NUMERICAL_MINIMUM VAR1 VAR2 RESULT_VAR
	[if]
		{VARIABLE_NUM_LESS_THAN {VAR2} ${VAR1} }
		[then]
			{VARIABLE {RESULT_VAR} ${VAR2} }
		[/then]
		[else]
			{VARIABLE {RESULT_VAR} ${VAR1} }
		[/else]
	[/if]
#enddef

#define VARIABLE_NUMERICAL_MAXIMUM VAR1 VAR2 RESULT_VAR
	[if]
		{VARIABLE_NUM_GREATER_THAN {VAR2} ${VAR1} }
		[then]
			{VARIABLE {RESULT_VAR} ${VAR2} }
		[/then]
		[else]
			{VARIABLE {RESULT_VAR} ${VAR1} }
		[/else]
	[/if]
#enddef

#define VARIABLE_LEXICAL_EQUALS VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		equals={RVALUE}
	[/variable]
#enddef

#define VARIABLE_LEXICAL_NOT_EQUALS VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		not_equals={RVALUE}
	[/variable]
#enddef

# Requires Wesnoth 1.3.10
#define VARIABLE_LEXICAL_CONTAINS VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		contains={RVALUE}
	[/variable]
#enddef

# Requires Wesnoth 1.3.2
#define VARIABLE_BOOLEAN_EQUALS VAR_ID RVALUE
	[variable]
		name={VAR_ID}
		boolean_equals={RVALUE}
	[/variable]
#enddef

# Requires Wesnoth 1.3.2
#define VARIABLE_BOOLEAN_NOT_EQUALS VAR_ID RVALUE
	[not]
		[variable]
			name={VAR_ID}
			boolean_equals={RVALUE}
		[/variable]
	[/not]
#enddef

#define CAPTURE_VILLAGE SIDE X Y
	[capture_village]
		side={SIDE}
		x={X}
		y={Y}
	[/capture_village]
#enddef

#define RETRIEVE_GOLD AMOUNT
	[sound]
		name=gold.ogg
	[/sound]
	# It's mandatory to use a variable instead of a macro, as the latter causes the resultant text
	# not to be matched in the gettext source.
	{VARIABLE temp_gold_retrieval_amount ({AMOUNT})}
	[message]
		speaker=narrator
		image="items/gold-coins-medium.png"
		message= _ "You retrieve $temp_gold_retrieval_amount pieces of gold."
	[/message]
	[gold]
		side=1
		amount=$temp_gold_retrieval_amount
	[/gold]
	{CLEAR_VARIABLE temp_gold_retrieval_amount}
#enddef

#define RECEIVE_GOLD AMOUNT
	[sound]
		name=gold.ogg
	[/sound]
	# It's mandatory to use a variable instead of a macro, as the latter causes the resultant text
	# not to be matched in the gettext source.
	{VARIABLE temp_gold_retrieval_amount ({AMOUNT})}
	[message]
		speaker=narrator
		image="items/gold-coins-medium.png"
		message= _ "You receive $temp_gold_retrieval_amount pieces of gold!"
	[/message]
	[gold]
		side=1
		amount=$temp_gold_retrieval_amount
	[/gold]
	{CLEAR_VARIABLE temp_gold_retrieval_amount}
#enddef

#define ADD_GOLD SIDE ONEASY ONMEDIUM ONHARD
	[gold]
		side={SIDE}
		{QUANTITY amount {ONEASY} {ONMEDIUM} {ONHARD} }
	[/gold]
#enddef

#define SET_GOLD SIDE ONEASY ONMEDIUM ONHARD
	[modify_side]
		side={SIDE}
		{QUANTITY gold {ONEASY} {ONMEDIUM} {ONHARD} }
	[/modify_side]
#enddef

#define SCROLL_TO_UNIT DESC
	[scroll_to_unit]
		description={DESC}
	[/scroll_to_unit]
#enddef

#define DELAY TIMEOUT
	[delay]
		time={TIMEOUT}
	[/delay]
#enddef

#define REDRAW
	[redraw]
		side=1
	[/redraw]
#enddef

#define MSG_SPEAKER SPEAKER TEXT
	[message]
		speaker={SPEAKER}
		message={TEXT}
	[/message]
#enddef

#define MSG_UNIT DESC TEXT
	[message]
		description={DESC}
		message={TEXT}
	[/message]
#enddef

#define MSG_SUF SUF TEXT
	[message]
		{SUF}
		message={TEXT}
	[/message]
#enddef

#define MSG_NARRATOR TEXT
	[message]
		speaker=narrator
		image="wesnoth-icon.png"
		message={TEXT}
	[/message]
#enddef

#define MSG_INNER TEXT
	[message]
		speaker=narrator
		image=misc/blank-hex.png
		message={TEXT}
	[/message]
#enddef

#define CUSTOM_MSG IMAGE TEXT
	[message]
		speaker=narrator
		image={IMAGE}
		message={TEXT}
	[/message]
#enddef

#define UI_COLOR_BONUS
<100,100,255>#enddef

#define UI_COLOR_GRAYED
<128,128,128>#enddef

#define UI_COLOR_FOOTNOTE
{UI_COLOR_GRAYED}#enddef

# Following macro describes a range of X,Y coordinates that make up a rectangle;
# I realized that I was better acustomed to Windows GDI's syntax for this stuff, as
# I usually messed up scenario events when filtering on rectangles
#define RECT _X1 _Y1 _X2 _Y2
	x={_X1}-{_X2}
	y={_Y1}-{_Y2}
#enddef

# This macro was originally a complex WML-emulated formula of more than 100 lines. Thanks zookeeper and
# Sapient for telling me of this [filter_adjacent_location] trick that reduces it to 8 lines. :)
#define GET_ADJACENT_HEX ORIGIN_X ORIGIN_Y DIRECTION RESULT_STORE
	[store_locations]
		[filter_adjacent_location]
			adjacent=-{DIRECTION}
			x={ORIGIN_X}
			y={ORIGIN_Y}
		[/filter_adjacent_location]
		variable={RESULT_STORE}
	[/store_locations]
#enddef

# Stores IftU's internal version values, to use with patching stub blocks for
# scenario compatibility with prior versions, for instance.
#define STORE_CAMPAIGN_VERSION VARIABLE_NAME
	[set_variable]
		name={VARIABLE_NAME}.major
		value={VERSION_INVASION_FROM_THE_UNKNOWN_MAJOR}
	[/set_variable]
	[set_variable]
		name={VARIABLE_NAME}.minor
		value={VERSION_INVASION_FROM_THE_UNKNOWN_MINOR}
	[/set_variable]
	[set_variable]
		name={VARIABLE_NAME}.revision
		value={VERSION_INVASION_FROM_THE_UNKNOWN_REVISION}
	[/set_variable]
	[set_variable]
		name={VARIABLE_NAME}.literal_string
		value="{VERSION_INVASION_FROM_THE_UNKNOWN_MAJOR}.{VERSION_INVASION_FROM_THE_UNKNOWN_MINOR}.{VERSION_INVASION_FROM_THE_UNKNOWN_REVISION}"
	[/set_variable]
#enddef
